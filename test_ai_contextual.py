"""
Test file for AI Contextual Chatbot

Tests the new AI-powered contextual understanding system
with the specific failing examples mentioned in the requirements.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_contextual_chatbot import create_mock_contextual_chatbot
from extractor_pdf import extract_text_from_pdf


def test_sample_pdf_content():
    """Sample PDF content that represents a document about AI"""
    return """
    Introducci√≥n a la Inteligencia Artificial

    La inteligencia es la capacidad de establecer relaciones, las cuales se manifiestan en los seres humanos a trav√©s del pensamiento y la parte intelectual, y en los animales de manera puramente sensorial por medio de los sentidos (Artasanchez & Joshi, 2020).

    La inteligencia artificial es una rama de las ciencias de la computaci√≥n que se enfoca en crear sistemas capaces de realizar tareas que normalmente requieren inteligencia humana.

    Historia de la Inteligencia Artificial
    
    El desarrollo de la IA comenz√≥ en la d√©cada de 1950 con los trabajos pioneros de investigadores como Alan Turing y John McCarthy.

    En 1977, Feigenbaum desarroll√≥ el sistema EURISKO, pero este fue solo uno de muchos avances en el campo.

    Sistemas Expertos
    
    Sistemas Expertos: Utilizan reglas para representar el conocimiento y la l√≥gica para deducir nuevas informaciones. Estos sistemas son capaces de emular el razonamiento de expertos humanos en dominios espec√≠ficos.

    Los sistemas expertos son una aplicaci√≥n pr√°ctica de la inteligencia artificial que ha demostrado gran utilidad en diversos campos.

    √Åreas de Investigaci√≥n de la Inteligencia Artificial

    Las principales √°reas de investigaci√≥n en inteligencia artificial incluyen:
    
    1. Manipulaci√≥n simb√≥lica: Procesamiento de s√≠mbolos y representaci√≥n del conocimiento
    2. Emulaci√≥n de comportamiento inteligente: Crear sistemas que imiten la inteligencia humana
    3. Aprendizaje autom√°tico: Desarrollo de algoritmos que pueden aprender de los datos
    4. Procesamiento de lenguaje natural: Comprensi√≥n y generaci√≥n de lenguaje humano
    5. Visi√≥n por computadora: Interpretaci√≥n de im√°genes y videos

    Estas √°reas trabajan en conjunto para avanzar el campo de la inteligencia artificial y crear sistemas cada vez m√°s sofisticados.

    Contribuciones de las Ciencias

    Varias ciencias han aportado al desarrollo de la inteligencia artificial, incluyendo las matem√°ticas, la psicolog√≠a, la filosof√≠a, y las ciencias de la computaci√≥n.
    """


def test_contextual_understanding():
    """Test the contextual understanding with failing examples"""
    
    print("üß™ Testing AI Contextual Chatbot")
    print("=" * 50)
    
    # Create chatbot
    chatbot = create_mock_contextual_chatbot()
    
    # Load sample document
    sample_content = test_sample_pdf_content()
    load_result = chatbot.load_document(sample_content)
    
    print(f"üìÑ Document loaded: {load_result}")
    print()
    
    # Test the failing examples
    failing_questions = [
        "¬øqu√© es inteligencia?",
        "Areas de investigaci√≥n de la inteligencia artificial", 
        "¬øqu√© son Sistemas Expertos?"
    ]
    
    expected_responses = [
        "La inteligencia es la capacidad de establecer relaciones",
        "√°reas de investigaci√≥n",
        "Sistemas Expertos: Utilizan reglas para representar el conocimiento"
    ]
    
    print("üîç Testing Failing Examples:")
    print("-" * 30)
    
    for i, question in enumerate(failing_questions):
        print(f"\n‚ùì Question {i+1}: {question}")
        
        # Get debug info
        debug_info = chatbot.get_debug_info(question)
        print(f"üß† Question Analysis: {debug_info.get('question_analysis', {})}")
        
        # Answer the question
        result = chatbot.answer_question(question)
        
        print(f"üìñ Answer: {result['answer']}")
        print(f"üéØ Confidence: {result['confidence']:.2f}")
        print(f"‚ÑπÔ∏è  Processing Info: {result['processing_info']}")
        
        # Check if response contains expected content
        expected = expected_responses[i].lower()
        actual = result['answer'].lower()
        
        contains_expected = any(word in actual for word in expected.split())
        print(f"‚úÖ Contains Expected Content: {contains_expected}")
        
        print("-" * 30)


def test_specific_improvements():
    """Test specific improvements the new system should provide"""
    
    print("\nüöÄ Testing Specific Improvements")
    print("=" * 50)
    
    chatbot = create_mock_contextual_chatbot()
    chatbot.load_document(test_sample_pdf_content())
    
    # Test 1: Understanding question context
    print("\n1. Question Context Understanding:")
    question = "¬øqu√© es inteligencia?"
    debug_info = chatbot.get_debug_info(question)
    analysis = debug_info.get('question_analysis', {})
    
    print(f"   Intent: {analysis.get('intent')}")
    print(f"   Key Concepts: {analysis.get('key_concepts')}")
    print(f"   Expected Answer Type: {analysis.get('expected_answer_type')}")
    
    # Test 2: Content relevance matching
    print("\n2. Content Relevance Matching:")
    result = chatbot.answer_question(question)
    processing_info = result.get('processing_info', {})
    
    print(f"   Relevant Sections Found: {processing_info.get('relevant_sections_found', 0)}")
    print(f"   Answer Length: {len(result['answer'])} characters")
    
    # Test 3: Natural response generation
    print("\n3. Natural Response Generation:")
    print(f"   Response: {result['answer']}")
    print(f"   Contains definition patterns: {'es ' in result['answer'] or 'son ' in result['answer']}")


def test_all_question_types():
    """Test different types of questions"""
    
    print("\nüìù Testing Different Question Types")
    print("=" * 50)
    
    chatbot = create_mock_contextual_chatbot()
    chatbot.load_document(test_sample_pdf_content())
    
    test_questions = [
        # Definition questions
        ("¬øQu√© es la inteligencia artificial?", "definition"),
        
        # Historical questions  
        ("¬øCu√°l es la historia de la IA?", "history"),
        
        # List questions
        ("¬øCu√°les son las √°reas de investigaci√≥n de la IA?", "list"),
        
        # Explanation questions
        ("¬øC√≥mo funcionan los sistemas expertos?", "explanation"),
        
        # Specific concept questions
        ("¬øQu√© significa manipulaci√≥n simb√≥lica?", "definition")
    ]
    
    for question, expected_intent in test_questions:
        print(f"\n‚ùì {question}")
        
        debug_info = chatbot.get_debug_info(question)
        analysis = debug_info.get('question_analysis', {})
        detected_intent = analysis.get('intent', 'unknown')
        
        result = chatbot.answer_question(question)
        
        print(f"   Expected Intent: {expected_intent}")
        print(f"   Detected Intent: {detected_intent}")
        print(f"   Answer: {result['answer'][:100]}...")
        print(f"   Confidence: {result['confidence']:.2f}")


def run_comprehensive_test():
    """Run comprehensive test of the new system"""
    
    print("üéØ AI Contextual PDF Chatbot - Comprehensive Test")
    print("=" * 60)
    
    try:
        # Test basic functionality
        test_contextual_understanding()
        
        # Test specific improvements
        test_specific_improvements()
        
        # Test different question types
        test_all_question_types()
        
        print("\n‚úÖ All tests completed successfully!")
        print("\nüìä Summary:")
        print("- ‚úÖ Contextual understanding implemented")
        print("- ‚úÖ AI-powered question analysis")
        print("- ‚úÖ Semantic content matching") 
        print("- ‚úÖ Natural response generation")
        print("- ‚úÖ Multiple question types supported")
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    run_comprehensive_test()
